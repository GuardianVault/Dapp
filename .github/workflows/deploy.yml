name: Deploy to IC

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      network:
        description: 'Network to deploy to'
        required: true
        default: 'local'
        type: choice
        options:
        - local
        - ic

env:
  DFX_VERSION: 0.15.2
  NODE_VERSION: 18

jobs:
  deploy:
    name: Deploy Canisters
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install DFX
      run: |
        sh -ci "$(curl -fsSL https://internetcomputer.org/install.sh)"
        echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './src/guardian-vault-frontend/package-lock.json'
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        profile: minimal
        override: true
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          node_modules
          .dfx
        key: ${{ runner.os }}-deploy-${{ hashFiles('**/Cargo.lock', '**/package-lock.json') }}
    
    - name: Install frontend dependencies
      working-directory: ./src/guardian-vault-frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: ./src/guardian-vault-frontend
      run: npm run build
    
    - name: Determine network
      id: network
      run: |
        if [ "${{ github.event.inputs.network }}" != "" ]; then
          echo "network=${{ github.event.inputs.network }}" >> $GITHUB_OUTPUT
        else
          echo "network=local" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup DFX identity (for IC deployment)
      if: steps.network.outputs.network == 'ic'
      run: |
        echo "${{ secrets.DFX_IDENTITY }}" > identity.pem
        dfx identity import github-actions identity.pem
        dfx identity use github-actions
        rm identity.pem
    
    - name: Start local replica (for local deployment)
      if: steps.network.outputs.network == 'local'
      run: |
        dfx start --background --clean
        sleep 10
    
    - name: Deploy canisters
      run: |
        if [ "${{ steps.network.outputs.network }}" == "ic" ]; then
          dfx deploy --network ic --yes
        else
          dfx deploy --yes
        fi
    
    - name: Get canister URLs
      id: urls
      run: |
        if [ "${{ steps.network.outputs.network }}" == "ic" ]; then
          FRONTEND_URL=$(dfx canister id guardian-vault-frontend --network ic)
          echo "frontend_url=https://${FRONTEND_URL}.ic0.app" >> $GITHUB_OUTPUT
          echo "backend_url=https://${FRONTEND_URL}.ic0.app" >> $GITHUB_OUTPUT
        else
          FRONTEND_URL=$(dfx canister id guardian-vault-frontend)
          echo "frontend_url=http://localhost:4943/?canisterId=${FRONTEND_URL}" >> $GITHUB_OUTPUT
          echo "backend_url=http://localhost:4943/?canisterId=${FRONTEND_URL}" >> $GITHUB_OUTPUT
        fi
    
    - name: Run post-deployment tests
      run: |
        # Basic smoke tests
        dfx canister call guardian-vault-backend get_canister_status
        echo "Deployment successful!"
        echo "Frontend URL: ${{ steps.urls.outputs.frontend_url }}"
    
    - name: Create deployment summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Network**: ${{ steps.network.outputs.network }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend URL**: ${{ steps.urls.outputs.frontend_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
    
    - name: Stop local replica (if started)
      if: steps.network.outputs.network == 'local'
      run: dfx stop

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment completed successfully!"
        # Add webhook notification here if needed
    
    - name: Notify failure  
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add webhook notification here if needed